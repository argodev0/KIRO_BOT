# Multi-stage Dockerfile for Frontend
# Optimized for production deployment with Nginx

# Build stage
FROM node:20-alpine AS builder

# Install build dependencies and security updates
RUN apk update && apk upgrade && \
    apk add --no-cache python3 make g++ git

WORKDIR /app

# Copy package files for dependency installation
COPY package*.json ./
COPY tsconfig.json ./
COPY vite.config.ts ./

# Install dependencies with clean cache
RUN npm ci --only=production=false && \
    npm cache clean --force

# Copy source code
COPY src/frontend/ ./src/frontend/

# Set build environment variables
ENV NODE_ENV=production
ENV VITE_API_URL=/api
ENV VITE_WS_URL=/socket.io

# Build the frontend with optimizations
RUN npm run build:frontend

# Verify build output
RUN ls -la dist/frontend/ && \
    test -f dist/frontend/index.html

# Production stage with Nginx
FROM nginx:alpine AS production

# Install security updates and required tools
RUN apk update && apk upgrade && \
    apk add --no-cache curl ca-certificates tzdata && \
    update-ca-certificates

# Remove default nginx configuration
RUN rm -rf /etc/nginx/conf.d/default.conf /usr/share/nginx/html/*

# Copy custom nginx configuration
COPY docker/nginx.conf /etc/nginx/nginx.conf
COPY docker/default.conf /etc/nginx/conf.d/default.conf

# Copy built frontend files from builder stage
COPY --from=builder /app/dist/frontend /usr/share/nginx/html

# Create necessary directories and set permissions
RUN mkdir -p /var/cache/nginx/client_temp && \
    mkdir -p /var/log/nginx && \
    chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d && \
    chmod -R 755 /usr/share/nginx/html

# Create health check endpoint
RUN echo '<!DOCTYPE html><html><head><title>Health Check</title></head><body><h1>OK</h1></body></html>' > /usr/share/nginx/html/health.html

# Switch to nginx user for security
USER nginx

# Expose ports
EXPOSE 80 443

# Health check with better error handling
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
  CMD curl -f http://localhost/health.html || curl -f http://localhost/ || exit 1

# Start nginx with proper signal handling
CMD ["nginx", "-g", "daemon off;"]