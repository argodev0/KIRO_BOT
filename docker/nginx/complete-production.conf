# Complete Production Nginx Configuration
# Paper Trading Bot with SSL, WebSocket, and Security Hardening
# This configuration combines all security, SSL, and WebSocket features

# Include security configurations
include /etc/nginx/conf.d/security.conf;

# Backend upstream with health checks and load balancing
upstream backend {
    server backend:3000 max_fails=3 fail_timeout=30s weight=1;
    keepalive 32;
    keepalive_requests 100;
    keepalive_timeout 60s;
}

# WebSocket upstream for real-time data
upstream websocket {
    server backend:3000 max_fails=2 fail_timeout=30s;
    keepalive 16;
    keepalive_requests 1000;
    keepalive_timeout 60s;
}

# HTTP to HTTPS redirect
server {
    listen 80;
    server_name ${DOMAIN_NAME} www.${DOMAIN_NAME};
    
    # Let's Encrypt ACME challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
        
        # Security headers even for ACME challenges
        add_header X-Paper-Trading-Mode "true" always;
        add_header X-Content-Type-Options "nosniff" always;
    }
    
    # Health check endpoint (HTTP)
    location /health {
        access_log off;
        return 200 "healthy - redirecting to HTTPS\n";
        add_header Content-Type text/plain;
        add_header X-Paper-Trading-Mode "true" always;
    }
    
    # Redirect all other HTTP traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# Main HTTPS server
server {
    listen 443 ssl http2;
    server_name ${DOMAIN_NAME} www.${DOMAIN_NAME};
    root /usr/share/nginx/html;
    index index.html index.htm;

    # SSL Certificate Configuration
    ssl_certificate /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN_NAME}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/${DOMAIN_NAME}/chain.pem;
    
    # Enhanced SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA256;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;
    
    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 1.1.1.1 1.0.0.1 valid=300s;
    resolver_timeout 5s;

    # Enhanced Security Headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=()" always;
    
    # Paper Trading Safety Headers - CRITICAL
    add_header X-Paper-Trading-Mode "true" always;
    add_header X-Trading-Environment "PAPER_TRADING_PRODUCTION" always;
    add_header X-Real-Trading-Status "DISABLED" always;
    add_header X-Financial-Risk "ZERO" always;
    add_header X-Server-Environment "PRODUCTION" always;

    # Content Security Policy for Trading Application
    add_header Content-Security-Policy "
        default-src 'self';
        script-src 'self' 'unsafe-inline' 'unsafe-eval' 
            https://unpkg.com 
            https://cdn.jsdelivr.net 
            https://s3.tradingview.com 
            https://charting-library.tradingview.com;
        style-src 'self' 'unsafe-inline' 
            https://fonts.googleapis.com 
            https://cdn.jsdelivr.net;
        img-src 'self' data: https: blob:;
        connect-src 'self' 
            ws: wss: 
            https://api.binance.com 
            https://api.kucoin.com 
            https://stream.binance.com 
            https://ws-api.kucoin.com;
        font-src 'self' 
            https://fonts.gstatic.com 
            https://cdn.jsdelivr.net;
        frame-src 'self' 
            https://www.tradingview.com 
            https://s.tradingview.com;
        object-src 'none';
        base-uri 'self';
        form-action 'self';
        frame-ancestors 'none';
        upgrade-insecure-requests;
    " always;

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
        add_header X-Paper-Trading-Mode "true" always;
    }

    # API proxy with enhanced security and paper trading enforcement
    location /api/ {
        # Rate limiting
        limit_req zone=api burst=30 nodelay;
        limit_conn perip 10;
        
        # CRITICAL: Paper trading safety headers
        proxy_set_header X-Paper-Trading-Mode "true";
        proxy_set_header X-Force-Paper-Trading "true";
        proxy_set_header X-Allow-Real-Trades "false";
        proxy_set_header X-Trading-Environment "PAPER_ONLY";
        
        # Standard proxy configuration
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_cache_bypass $http_upgrade;
        
        # Security headers for API
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
    }

    # WebSocket proxy for real-time market data streaming
    location /socket.io/ {
        # Rate limiting for WebSocket connections
        limit_req zone=websocket burst=50 nodelay;
        limit_conn perip 20;
        
        # CRITICAL: Paper trading safety headers
        proxy_set_header X-Paper-Trading-Mode "true";
        proxy_set_header X-Force-Paper-Trading "true";
        proxy_set_header X-Trading-Environment "PAPER_ONLY";
        proxy_set_header X-Real-Trading-Blocked "true";
        proxy_set_header X-WebSocket-Type "market-data";
        
        # WebSocket upgrade configuration
        proxy_pass http://websocket;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # WebSocket-specific timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 86400s;
        proxy_read_timeout 86400s;
        
        # Disable buffering for real-time data
        proxy_buffering off;
        proxy_cache off;
        
        # Enable compression
        proxy_set_header Accept-Encoding gzip, deflate;
        
        # Logging for WebSocket connections
        access_log /var/log/nginx/websocket_access.log main;
    }

    # Alternative WebSocket endpoint
    location /ws/ {
        limit_req zone=websocket burst=50 nodelay;
        limit_conn perip 20;
        
        proxy_set_header X-Paper-Trading-Mode "true";
        proxy_set_header X-Force-Paper-Trading "true";
        
        proxy_pass http://websocket;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 30s;
        proxy_send_timeout 86400s;
        proxy_read_timeout 86400s;
        proxy_buffering off;
    }

    # Authentication endpoints with stricter rate limiting
    location /api/auth/ {
        limit_req zone=auth burst=5 nodelay;
        limit_conn perip 3;
        
        # Paper trading safety headers
        proxy_set_header X-Paper-Trading-Mode "true";
        proxy_set_header X-Force-Paper-Trading "true";
        
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;
        
        # Enhanced security for auth endpoints
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;
        
        # Log authentication attempts
        access_log /var/log/nginx/auth_access.log main;
    }

    # Trading endpoints with maximum paper trading validation
    location /api/trading/ {
        limit_req zone=trading burst=10 nodelay;
        limit_conn perip 5;
        
        # CRITICAL: Multiple layers of paper trading enforcement
        proxy_set_header X-Paper-Trading-Mode "true";
        proxy_set_header X-Force-Paper-Trading "true";
        proxy_set_header X-Allow-Real-Trades "false";
        proxy_set_header X-Trading-Environment "PAPER_ONLY";
        proxy_set_header X-Real-Trading-Blocked "true";
        proxy_set_header X-Financial-Safety "MAXIMUM";
        
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;
        
        # Enhanced security
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;
        
        # Comprehensive logging for all trading requests
        access_log /var/log/nginx/trading_access.log main;
        error_log /var/log/nginx/trading_error.log warn;
    }

    # Market data endpoints with caching
    location /api/market/ {
        limit_req zone=api burst=50 nodelay;
        
        proxy_set_header X-Paper-Trading-Mode "true";
        proxy_set_header X-Live-Data-Source "MAINNET";
        
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Enable caching for market data
        proxy_cache market_cache;
        proxy_cache_valid 200 5s;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        add_header X-Cache-Status $upstream_cache_status;
    }

    # Static files with aggressive caching and compression
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options "nosniff";
        add_header X-Paper-Trading-Mode "true" always;
        
        # Enable compression
        gzip_static on;
        brotli_static on;
        
        try_files $uri =404;
        
        # Security headers for static files
        add_header X-Frame-Options "DENY" always;
        add_header X-XSS-Protection "1; mode=block" always;
    }

    # React Router - serve index.html for all routes
    location / {
        try_files $uri $uri/ /index.html;
        
        # Cache control for HTML files
        location ~* \.html$ {
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            
            # Paper trading mode indicators in HTML responses
            add_header X-Paper-Trading-Mode "true" always;
            add_header X-Trading-Environment "PAPER_TRADING_PRODUCTION" always;
            add_header X-Financial-Risk "ZERO" always;
        }
    }

    # Monitoring endpoints (restricted access)
    location /metrics {
        # Restrict access to monitoring systems
        allow 127.0.0.1;
        allow 172.20.0.0/16;  # Docker network
        allow 10.0.0.0/8;     # Private networks
        deny all;
        
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        access_log off;
    }

    # Admin interface (highly restricted)
    location /admin {
        # Restrict to specific IPs only
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        # Additional authentication
        auth_basic "Admin Area - Paper Trading Bot";
        auth_basic_user_file /etc/nginx/.htpasswd;
        
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Log all admin access
        access_log /var/log/nginx/admin_access.log main;
    }

    # Security endpoints
    include /etc/nginx/conf.d/security-locations.conf;

    # Custom error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
        add_header X-Paper-Trading-Mode "true" always;
    }
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
        add_header X-Paper-Trading-Mode "true" always;
    }
}

# Additional server block for www redirect
server {
    listen 443 ssl http2;
    server_name www.${DOMAIN_NAME};
    
    ssl_certificate /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN_NAME}/privkey.pem;
    
    return 301 https://${DOMAIN_NAME}$request_uri;
}