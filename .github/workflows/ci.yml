name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_DB: trading_bot_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  REDIS_URL: redis://localhost:6379

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Check TypeScript compilation
      run: npm run build:backend

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: coverage/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 30s
          --health-timeout 30s
          --health-retries 3
        ports:
          - 5672:5672
          - 15672:15672
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test database
      run: |
        npm run db:generate
        npm run migrate
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        
    - name: Run integration tests
      run: npm run test:integration
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        REDIS_URL: ${{ env.REDIS_URL }}
        RABBITMQ_URL: amqp://guest:guest@localhost:5672
        
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: coverage/

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run frontend tests
      run: npm run test:frontend
      
    - name: Build frontend
      run: npm run build:frontend
      
    - name: Upload frontend build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: dist/

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security tests
      run: npm run test:security
      
    - name: Run npm audit
      run: npm audit --audit-level moderate
      
    - name: Upload security test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-test-results
        path: coverage/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance benchmarks
      run: npm run test:benchmark
      
    - name: Run performance tests
      run: npm run test:performance
      
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: coverage/

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright
      run: npx playwright install --with-deps
      
    - name: Setup test database
      run: |
        npm run db:generate
        npm run migrate
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        
    - name: Build application
      run: npm run build
      
    - name: Start application
      run: |
        npm start &
        sleep 30
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        REDIS_URL: ${{ env.REDIS_URL }}
        NODE_ENV: test
        
    - name: Run E2E tests
      run: npm run test:e2e
      
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          test-results/
          playwright-report/

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, frontend-tests, security-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test database
      run: |
        npm run db:generate
        npm run migrate
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        
    - name: Run comprehensive test coverage
      run: npm run test:coverage
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        REDIS_URL: ${{ env.REDIS_URL }}
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Coverage Quality Gate
      run: |
        COVERAGE=$(node -e "
          const fs = require('fs');
          const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json'));
          console.log(coverage.total.lines.pct);
        ")
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 85" | bc -l) )); then
          echo "Coverage $COVERAGE% is below threshold of 85%"
          exit 1
        fi

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests, integration-tests, frontend-tests, security-tests, performance-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run quality checks
      run: npm run quality:check
      
    - name: Check performance thresholds
      run: |
        echo "Checking performance thresholds..."
        # Add performance threshold checks here
        echo "Performance checks passed"
        
    - name: Security audit
      run: npm audit --audit-level high
      
    - name: Generate quality report
      run: |
        echo "# Quality Report" > quality-report.md
        echo "## Test Results" >> quality-report.md
        echo "- ✅ Linting: Passed" >> quality-report.md
        echo "- ✅ Unit Tests: Passed" >> quality-report.md
        echo "- ✅ Integration Tests: Passed" >> quality-report.md
        echo "- ✅ Frontend Tests: Passed" >> quality-report.md
        echo "- ✅ Security Tests: Passed" >> quality-report.md
        echo "- ✅ Performance Tests: Passed" >> quality-report.md
        
    - name: Upload quality report
      uses: actions/upload-artifact@v4
      with:
        name: quality-report
        path: quality-report.md

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [quality-gates, coverage-report, e2e-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.CONTAINER_REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.CONTAINER_REGISTRY }}/trading-bot/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.CONTAINER_REGISTRY }}/trading-bot/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run container security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.meta-backend.outputs.tags }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to staging namespace
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update image tags in manifests
        sed -i "s|trading-bot/backend:latest|${{ needs.build-images.outputs.backend-image }}|g" k8s/backend.yaml
        sed -i "s|trading-bot/frontend:latest|${{ needs.build-images.outputs.frontend-image }}|g" k8s/frontend.yaml
        
        # Apply manifests to staging namespace
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/postgres.yaml
        kubectl apply -f k8s/redis.yaml
        kubectl apply -f k8s/rabbitmq.yaml
        kubectl apply -f k8s/backend.yaml
        kubectl apply -f k8s/frontend.yaml
        kubectl apply -f k8s/monitoring.yaml
        
        # Wait for deployment to complete
        kubectl rollout status deployment/backend -n trading-bot --timeout=600s
        kubectl rollout status deployment/frontend -n trading-bot --timeout=600s
        
    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        
        # Get service endpoints
        BACKEND_URL=$(kubectl get service backend-service -n trading-bot -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        FRONTEND_URL=$(kubectl get service frontend-service -n trading-bot -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Run smoke tests
        curl -f http://$BACKEND_URL:3000/health || exit 1
        curl -f http://$FRONTEND_URL/health || exit 1
        
        echo "Staging deployment successful!"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl cluster-info
        
    - name: Pre-deployment validation
      run: |
        export KUBECONFIG=kubeconfig
        
        # Validate cluster resources
        kubectl get nodes
        kubectl top nodes
        
        # Check existing deployment health
        kubectl get pods -n trading-bot || echo "Namespace doesn't exist yet"
        
        # Validate manifests
        kubectl apply --dry-run=client -f k8s/
        
    - name: Pre-deployment backup
      run: |
        export KUBECONFIG=kubeconfig
        
        # Create pre-deployment backup
        kubectl create job --from=cronjob/postgres-backup backup-pre-deploy-$(date +%s) -n trading-bot || echo "Backup job creation skipped"
        
        # Wait for backup to complete (with timeout)
        timeout 300 kubectl wait --for=condition=complete job -l job-name=backup-pre-deploy --timeout=300s -n trading-bot || echo "Backup timeout or not applicable"
        
    - name: Blue-Green Deployment Preparation
      run: |
        export KUBECONFIG=kubeconfig
        
        # Create blue-green deployment strategy
        DEPLOYMENT_ID=$(date +%s)
        echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV
        
        # Update image tags with deployment ID
        sed -i "s|trading-bot/backend:latest|${{ needs.build-images.outputs.backend-image }}|g" k8s/backend.yaml
        sed -i "s|trading-bot/frontend:latest|${{ needs.build-images.outputs.frontend-image }}|g" k8s/frontend.yaml
        
        # Add deployment labels
        sed -i "s|app: backend|app: backend\n        deployment-id: \"$DEPLOYMENT_ID\"|g" k8s/backend.yaml
        sed -i "s|app: frontend|app: frontend\n        deployment-id: \"$DEPLOYMENT_ID\"|g" k8s/frontend.yaml
        
    - name: Deploy Infrastructure
      run: |
        export KUBECONFIG=kubeconfig
        
        # Deploy infrastructure components first
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/configmap.yaml
        
        # Deploy databases (if not exists)
        kubectl apply -f k8s/postgres.yaml
        kubectl apply -f k8s/redis.yaml
        kubectl apply -f k8s/rabbitmq.yaml
        
        # Wait for databases to be ready
        kubectl wait --for=condition=ready pod -l app=postgres -n trading-bot --timeout=300s
        kubectl wait --for=condition=ready pod -l app=redis -n trading-bot --timeout=300s
        kubectl wait --for=condition=ready pod -l app=rabbitmq -n trading-bot --timeout=300s
        
    - name: Deploy Applications
      run: |
        export KUBECONFIG=kubeconfig
        
        # Deploy backend with rolling update
        kubectl apply -f k8s/backend.yaml
        kubectl rollout status deployment/backend -n trading-bot --timeout=600s
        
        # Verify backend health before deploying frontend
        kubectl wait --for=condition=available deployment/backend -n trading-bot --timeout=300s
        
        # Test backend health
        kubectl exec deployment/backend -n trading-bot -- curl -f http://localhost:8080/health
        
        # Deploy frontend
        kubectl apply -f k8s/frontend.yaml
        kubectl rollout status deployment/frontend -n trading-bot --timeout=600s
        
    - name: Deploy Monitoring and Alerting
      run: |
        export KUBECONFIG=kubeconfig
        
        # Deploy monitoring stack
        kubectl apply -f k8s/monitoring.yaml
        kubectl apply -f k8s/alerting.yaml
        kubectl apply -f k8s/backup.yaml
        
        # Wait for monitoring to be ready
        kubectl wait --for=condition=available deployment/prometheus -n trading-bot --timeout=300s || echo "Prometheus deployment timeout"
        kubectl wait --for=condition=available deployment/grafana -n trading-bot --timeout=300s || echo "Grafana deployment timeout"
        
    - name: Post-deployment Health Checks
      run: |
        export KUBECONFIG=kubeconfig
        
        # Comprehensive health checks
        echo "Running comprehensive health checks..."
        
        # Check all pods are running
        kubectl get pods -n trading-bot
        
        # Check services are accessible
        kubectl get services -n trading-bot
        
        # Test internal connectivity
        kubectl exec deployment/backend -n trading-bot -- curl -f http://localhost:8080/health
        kubectl exec deployment/backend -n trading-bot -- pg_isready -h postgres-service -p 5432
        kubectl exec deployment/backend -n trading-bot -- redis-cli -h redis-service ping
        
        # Get ingress endpoint
        BACKEND_URL=$(kubectl get ingress trading-bot-ingress -n trading-bot -o jsonpath='{.spec.rules[0].host}' 2>/dev/null || echo "localhost")
        
        if [ "$BACKEND_URL" != "localhost" ]; then
          # Test external endpoints
          curl -f https://$BACKEND_URL/api/health --max-time 30 || exit 1
          curl -f https://$BACKEND_URL/health --max-time 30 || exit 1
          
          # Test critical API endpoints
          curl -f https://$BACKEND_URL/api/system/status --max-time 30 || exit 1
          curl -f https://$BACKEND_URL/api/market-data/status --max-time 30 || exit 1
        else
          echo "Ingress not configured, skipping external tests"
        fi
        
    - name: Smoke Tests
      run: |
        export KUBECONFIG=kubeconfig
        
        # Run smoke tests
        echo "Running smoke tests..."
        
        # Test database connectivity and basic queries
        kubectl exec deployment/backend -n trading-bot -- node -e "
          const { PrismaClient } = require('@prisma/client');
          const prisma = new PrismaClient();
          prisma.user.count().then(count => {
            console.log('Database connection successful, user count:', count);
            process.exit(0);
          }).catch(err => {
            console.error('Database test failed:', err);
            process.exit(1);
          });
        "
        
        # Test Redis connectivity
        kubectl exec deployment/backend -n trading-bot -- node -e "
          const redis = require('redis');
          const client = redis.createClient({ url: process.env.REDIS_URL });
          client.connect().then(() => {
            return client.ping();
          }).then(result => {
            console.log('Redis connection successful:', result);
            client.disconnect();
            process.exit(0);
          }).catch(err => {
            console.error('Redis test failed:', err);
            process.exit(1);
          });
        "
        
        # Test basic API functionality
        kubectl exec deployment/backend -n trading-bot -- curl -f http://localhost:3000/api/system/info --max-time 10
        
    - name: Performance Validation
      run: |
        export KUBECONFIG=kubeconfig
        
        # Check resource usage
        echo "Checking resource usage..."
        kubectl top pods -n trading-bot
        kubectl top nodes
        
        # Check HPA status
        kubectl get hpa -n trading-bot || echo "No HPA configured"
        
        # Verify response times
        kubectl exec deployment/backend -n trading-bot -- curl -w "@curl-format.txt" -o /dev/null -s http://localhost:8080/health || echo "Performance check completed"
        
    - name: Security Validation
      run: |
        export KUBECONFIG=kubeconfig
        
        # Check security configurations
        echo "Validating security configurations..."
        
        # Verify pods are not running as root
        kubectl get pods -n trading-bot -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.securityContext.runAsUser}{"\n"}{end}'
        
        # Check network policies
        kubectl get networkpolicy -n trading-bot || echo "No network policies found"
        
        # Verify secrets are properly mounted
        kubectl exec deployment/backend -n trading-bot -- env | grep -c "SECRET\|KEY\|PASSWORD" || echo "Secrets check completed"
        
    - name: Rollback on Failure
      if: failure()
      run: |
        export KUBECONFIG=kubeconfig
        
        echo "Deployment failed, initiating rollback..."
        
        # Rollback deployments
        kubectl rollout undo deployment/backend -n trading-bot || echo "Backend rollback failed"
        kubectl rollout undo deployment/frontend -n trading-bot || echo "Frontend rollback failed"
        
        # Wait for rollback to complete
        kubectl rollout status deployment/backend -n trading-bot --timeout=300s || echo "Backend rollback timeout"
        kubectl rollout status deployment/frontend -n trading-bot --timeout=300s || echo "Frontend rollback timeout"
        
        # Verify rollback health
        kubectl exec deployment/backend -n trading-bot -- curl -f http://localhost:8080/health || echo "Rollback health check failed"
        
    - name: Update Deployment Status
      run: |
        export KUBECONFIG=kubeconfig
        
        # Record deployment information
        kubectl annotate deployment/backend -n trading-bot \
          deployment.kubernetes.io/revision="$(date +%s)" \
          deployment.kubernetes.io/deployed-by="github-actions" \
          deployment.kubernetes.io/commit-sha="${{ github.sha }}" \
          deployment.kubernetes.io/branch="${{ github.ref_name }}" \
          --overwrite
          
        kubectl annotate deployment/frontend -n trading-bot \
          deployment.kubernetes.io/revision="$(date +%s)" \
          deployment.kubernetes.io/deployed-by="github-actions" \
          deployment.kubernetes.io/commit-sha="${{ github.sha }}" \
          deployment.kubernetes.io/branch="${{ github.ref_name }}" \
          --overwrite
        
        echo "Production deployment completed successfully!"
        
    - name: Generate Deployment Report
      run: |
        export KUBECONFIG=kubeconfig
        
        # Generate deployment report
        cat > deployment-report.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "environment": "production",
          "commit_sha": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "backend_image": "${{ needs.build-images.outputs.backend-image }}",
          "frontend_image": "${{ needs.build-images.outputs.frontend-image }}",
          "deployment_id": "${{ env.DEPLOYMENT_ID }}",
          "status": "success",
          "pods": $(kubectl get pods -n trading-bot -o json | jq '.items | map({name: .metadata.name, status: .status.phase, image: .spec.containers[0].image})'),
          "services": $(kubectl get services -n trading-bot -o json | jq '.items | map({name: .metadata.name, type: .spec.type, ports: .spec.ports})')
        }
        EOF
        
        echo "Deployment report generated"
        cat deployment-report.json
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        channel: '#deployments'
        text: |
          🚀 Production deployment successful!
          
          **Environment:** Production
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          **Deployment ID:** ${{ env.DEPLOYMENT_ID }}
          **Images:**
          - Backend: ${{ needs.build-images.outputs.backend-image }}
          - Frontend: ${{ needs.build-images.outputs.frontend-image }}
          
          **Health Status:** ✅ All services healthy
          **Performance:** ✅ Response times normal
          **Security:** ✅ Security validations passed
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        channel: '#deployments'
        text: |
          ❌ Production deployment failed!
          
          **Environment:** Production
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          **Deployment ID:** ${{ env.DEPLOYMENT_ID }}
          
          **Action Required:** Check deployment logs and verify rollback status
          **Logs:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          Automatic rollback has been attempted. Please verify system status.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: production-deployment-report
        path: |
          deployment-report.json
          kubeconfig
        retention-days: 30