version: '3.8'

services:
  # Frontend Service with Enhanced SSL and Security
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: trading-bot-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
      certbot:
        condition: service_started
    networks:
      - trading-bot-network
    volumes:
      # SSL certificates and DH parameters
      - ./docker/ssl:/etc/nginx/ssl:ro
      - certbot_certs:/etc/letsencrypt:ro
      - certbot_www:/var/www/certbot:ro
      
      # Enhanced Nginx configurations
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/complete-production.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/security.conf:/etc/nginx/conf.d/security.conf:ro
      - ./docker/nginx/websocket.conf:/etc/nginx/conf.d/websocket.conf:ro
      
      # Authentication and security files
      - ./docker/nginx/.htpasswd:/etc/nginx/.htpasswd:ro
      
      # Log directories
      - nginx_logs:/var/log/nginx
      
      # Cache directory
      - nginx_cache:/var/cache/nginx
    environment:
      - NODE_ENV=production
      - SSL_ENABLED=true
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}
      - PAPER_TRADING_MODE=true
      - FORCE_PAPER_TRADING=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health.html"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # SSL Certificate Management with Certbot
  certbot:
    image: certbot/certbot:latest
    container_name: trading-bot-certbot
    restart: unless-stopped
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
      - ./docker/scripts/ssl-renew.sh:/scripts/ssl-renew.sh:ro
    environment:
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL:-admin@localhost}
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}
    command: >
      sh -c "
        if [ ! -f /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem ]; then
          echo 'SSL certificates not found, creating self-signed certificates for development';
          mkdir -p /etc/letsencrypt/live/${DOMAIN_NAME};
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 
            -keyout /etc/letsencrypt/live/${DOMAIN_NAME}/privkey.pem 
            -out /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem 
            -subj '/C=US/ST=State/L=City/O=Organization/CN=${DOMAIN_NAME}';
        fi;
        trap exit TERM;
        while :; do
          if [ '${DOMAIN_NAME}' != 'localhost' ]; then
            certbot renew --webroot --webroot-path=/var/www/certbot;
          fi;
          sleep 12h & wait $!;
        done;
      "
    networks:
      - trading-bot-network

  # Backend Service with Paper Trading Enforcement
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: trading-bot-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - trading-bot-network
    environment:
      # Core Application
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      
      # CRITICAL: Paper Trading Safety Configuration
      - PAPER_TRADING_MODE=true
      - ALLOW_REAL_TRADES=false
      - FORCE_PAPER_TRADING=true
      - PAPER_TRADING_VALIDATION=strict
      - TRADING_SIMULATION_ONLY=true
      
      # Database
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-defaultpassword}@postgres:5432/trading_bot
      - DATABASE_SSL=false
      - DATABASE_POOL_SIZE=20
      
      # Cache and Message Queue
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672
      
      # Security
      - JWT_SECRET=${JWT_SECRET:-default-jwt-secret-change-in-production}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-default-encryption-key-change-in-production}
      - BCRYPT_ROUNDS=12
      - HELMET_ENABLED=true
      - CSRF_PROTECTION=true
      
      # Exchange APIs - MAINNET READ-ONLY for Paper Trading
      - BINANCE_API_KEY=${BINANCE_API_KEY:-}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET:-}
      - BINANCE_SANDBOX=false
      - BINANCE_MAINNET=true
      - BINANCE_READ_ONLY=true
      
      - KUCOIN_API_KEY=${KUCOIN_API_KEY:-}
      - KUCOIN_API_SECRET=${KUCOIN_API_SECRET:-}
      - KUCOIN_PASSPHRASE=${KUCOIN_PASSPHRASE:-}
      - KUCOIN_SANDBOX=false
      - KUCOIN_MAINNET=true
      - KUCOIN_READ_ONLY=true
      
      # Monitoring
      - MONITORING_ENABLED=true
      - PROMETHEUS_PORT=9090
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - METRICS_ENABLED=true
      - HEALTH_CHECK_ENABLED=true
      
      # Paper Trading Configuration
      - VIRTUAL_BALANCE_USD=100000
      - VIRTUAL_BALANCE_BTC=10
      - VIRTUAL_BALANCE_ETH=100
      - TRADING_FEE_SIMULATION=0.001
      - SLIPPAGE_SIMULATION=0.0005
      - PAPER_TRADE_AUDIT_LOG=true
      
    volumes:
      - backend_logs:/app/logs
      - backend_tmp:/app/tmp
      - production_config:/app/config:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: trading-bot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: trading_bot
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-defaultpassword}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - trading-bot-network
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d trading_bot"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trading-bot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - trading-bot-network
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: trading-bot-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
      RABBITMQ_VM_MEMORY_HIGH_WATERMARK: 0.6
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - trading-bot-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-bot-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - trading-bot-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.route-prefix=/'
      - '--web.external-url=http://localhost:9090/'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: trading-bot-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_SECURITY_COOKIE_SECURE: true
      GF_SECURITY_COOKIE_SAMESITE: strict
      GF_SERVER_ROOT_URL: http://localhost:3001
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - trading-bot-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: trading-bot-backup
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - trading-bot-network
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=trading_bot
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-defaultpassword}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    volumes:
      - postgres_backups:/backups
      - backup_logs:/app/logs
      - ./docker/scripts/backup.sh:/scripts/backup.sh:ro
    command: >
      sh -c "
        echo 'Setting up backup service...';
        apk add --no-cache dcron;
        echo '${BACKUP_SCHEDULE:-0 2 * * *} /scripts/backup.sh' | crontab -;
        crond -f;
      "
    healthcheck:
      test: ["CMD", "pgrep", "crond"]
      interval: 60s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  backend_logs:
    driver: local
  backend_tmp:
    driver: local
  backup_logs:
    driver: local
  certbot_certs:
    driver: local
  certbot_www:
    driver: local
  production_config:
    driver: local
  nginx_logs:
    driver: local
  nginx_cache:
    driver: local

networks:
  trading-bot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16