apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: trading-bot
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9464"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: backend
        image: trading-bot/backend:latest
        ports:
        - containerPort: 3000
          name: http
        - containerPort: 9464
          name: metrics
        - containerPort: 8080
          name: health
        env:
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: trading-bot-secrets
              key: JWT_SECRET
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: trading-bot-secrets
              key: ENCRYPTION_KEY
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trading-bot-secrets
              key: POSTGRES_PASSWORD
        - name: BINANCE_API_KEY
          valueFrom:
            secretKeyRef:
              name: exchange-api-secrets
              key: BINANCE_API_KEY
        - name: BINANCE_API_SECRET
          valueFrom:
            secretKeyRef:
              name: exchange-api-secrets
              key: BINANCE_API_SECRET
        - name: KUCOIN_API_KEY
          valueFrom:
            secretKeyRef:
              name: exchange-api-secrets
              key: KUCOIN_API_KEY
        - name: KUCOIN_API_SECRET
          valueFrom:
            secretKeyRef:
              name: exchange-api-secrets
              key: KUCOIN_API_SECRET
        - name: KUCOIN_PASSPHRASE
          valueFrom:
            secretKeyRef:
              name: exchange-api-secrets
              key: KUCOIN_PASSPHRASE
        envFrom:
        - configMapRef:
            name: trading-bot-config
        resources:
          requests:
            cpu: 1
            memory: 1Gi
          limits:
            cpu: 2
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 40
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: tmp
          mountPath: /app/tmp
      volumes:
      - name: logs
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres-service -p 5432 -U postgres; do
            echo "Waiting for postgres..."
            sleep 2
          done
      - name: wait-for-redis
        image: redis:7-alpine
        command:
        - sh
        - -c
        - |
          until redis-cli -h redis-service ping; do
            echo "Waiting for redis..."
            sleep 2
          done
      - name: migrate-database
        image: trading-bot/backend:latest
        command:
        - sh
        - -c
        - |
          npx prisma migrate deploy
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trading-bot-secrets
              key: POSTGRES_PASSWORD
        envFrom:
        - configMapRef:
            name: trading-bot-config
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: trading-bot
  labels:
    app: backend
spec:
  selector:
    app: backend
  ports:
  - name: http
    port: 3000
    targetPort: 3000
  - name: metrics
    port: 9464
    targetPort: 9464
  type: ClusterIP
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: trading-bot
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60